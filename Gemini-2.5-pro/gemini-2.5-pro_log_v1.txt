========================================================================= test session starts =========================================================================
platform darwin -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0
cachedir: .pytest_cache
plugins: Faker-37.1.0
collected 16 items                                                                                                                                                    

main.py::test_e2e_create_pet PASSED                                                                                                                             [  6%]
main.py::test_e2e_get_pet_by_id PASSED                                                                                                                          [ 12%]
main.py::test_e2e_update_pet_put PASSED                                                                                                                         [ 18%]
main.py::test_e2e_update_pet_post_form FAILED                                                                                                                   [ 25%]
main.py::test_e2e_delete_pet PASSED                                                                                                                             [ 31%]
main.py::test_e2e_get_deleted_pet PASSED                                                                                                                        [ 37%]
main.py::test_get_pets_by_status_available PASSED                                                                                                               [ 43%]
main.py::test_get_pets_by_tags PASSED                                                                                                                           [ 50%]
main.py::test_create_pet_invalid_data PASSED                                                                                                                    [ 56%]
main.py::test_get_pet_by_invalid_id_string PASSED                                                                                                               [ 62%]
main.py::test_get_pet_by_nonexistent_id PASSED                                                                                                                  [ 68%]
main.py::test_delete_nonexistent_pet FAILED                                                                                                                     [ 75%]
main.py::test_update_nonexistent_pet_put PASSED                                                                                                                 [ 81%]
main.py::test_update_pet_form_nonexistent_id FAILED                                                                                                             [ 87%]
main.py::test_upload_image_invalid_content_type PASSED                                                                                                          [ 93%]
main.py::test_get_pets_by_invalid_status PASSED                                                                                                                 [100%]
==================================================
                API COVERAGE REPORT                 
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 44.6%
2. Покрытие статус-кодов раздела Pet: 44.8%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 20.3%

Детали по endpoint'ам:
DELETE /pet/{petId}: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
DELETE /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
DELETE /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
GET /pet/findByStatus: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', 'default']
GET /pet/findByTags: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
GET /pet/{petId}: 3/4 (75.0%) ------> ['200', '400', '404'] / ['200', '400', '404', 'default']
GET /store/inventory: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
GET /user/login: 0/3 (0.0%) ------> [] / ['200', '400', 'default']
GET /user/logout: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
POST /pet: 2/4 (50.0%) ------> ['200', '400'] / ['200', '400', '422', 'default']
POST /pet/{petId}: 1/3 (33.3%) ------> ['400'] / ['200', '400', 'default']
POST /pet/{petId}/uploadImage: 1/4 (25.0%) ------> ['415'] / ['200', '400', '404', 'default']
POST /store/order: 0/4 (0.0%) ------> [] / ['200', '400', '422', 'default']
POST /user: 0/2 (0.0%) ------> [] / ['200', 'default']
POST /user/createWithList: 0/2 (0.0%) ------> [] / ['200', 'default']
PUT /pet: 2/5 (40.0%) ------> ['200', '404'] / ['200', '400', '404', '422', 'default']
PUT /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']

=========================


============================================================================== FAILURES ===============================================================================
____________________________________________________________________ test_e2e_update_pet_post_form ____________________________________________________________________

    def test_e2e_update_pet_post_form():
        """Тест обновления питомца с использованием данных формы (POST /pet/{petId})."""
        global created_pet_id
        assert created_pet_id is not None, "Pet ID not set from create test"
        endpoint = f"POST /pet/{{petId}}" # Используем шаблонный путь для метрик
        url = f"{BASE_URL}/pet/{created_pet_id}"
        headers = {'Accept': 'application/json'} # Content-Type будет application/x-www-form-urlencoded по умолчанию
        form_data = {
            'name': f'FormUpdatedName_{created_pet_id}',
            'status': 'sold'
        }
    
        response = requests.post(url, headers=headers, data=form_data)
        # Ожидаем 200 согласно документации openapi.json
        coverage.record_test_result(endpoint, response.status_code)
    
>       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = <Response [400]>.status_code

main.py:123: AssertionError
_____________________________________________________________________ test_delete_nonexistent_pet _____________________________________________________________________

    def test_delete_nonexistent_pet():
        """Тест удаления несуществующего питомца (DELETE /pet/{petId} -> 404 или 400)."""
        # OpenAPI spec указывает 400 Bad Request, но 404 тоже логичен.
        # В реализации Petstore V3, похоже, возвращается 404.
        endpoint = f"DELETE /pet/{{petId}}"
        non_existent_id = 0 # Используем ID, который точно не существует
        url = f"{BASE_URL}/pet/{non_existent_id}"
        headers = {'Accept': 'application/json'}
    
        response = requests.delete(url, headers=headers)
        coverage.record_test_result(endpoint, response.status_code)
    
        # В Petstore V3 эндпоинт DELETE /pet/{petId} возвращает 404 для несуществующего ID
>       assert response.status_code == 404
E       assert 200 == 404
E        +  where 200 = <Response [200]>.status_code

main.py:252: AssertionError
_________________________________________________________________ test_update_pet_form_nonexistent_id _________________________________________________________________

    def test_update_pet_form_nonexistent_id():
        """Тест обновления питомца формой с несуществующим ID (POST /pet/{petId} -> 404)."""
        # OpenAPI spec говорит 400 (Invalid ID supplied). Petstore V3 возвращает 404.
        endpoint = f"POST /pet/{{petId}}"
        non_existent_id = 0
        url = f"{BASE_URL}/pet/{non_existent_id}"
        headers = {'Accept': 'application/json'}
        form_data = {'name': 'Ghost', 'status': 'missing'}
    
        response = requests.post(url, headers=headers, data=form_data)
        coverage.record_test_result(endpoint, response.status_code)
    
>       assert response.status_code == 404 # Ожидаем 404 Not Found
E       assert 400 == 404
E        +  where 400 = <Response [400]>.status_code

main.py:281: AssertionError
======================================================================= short test summary info =======================================================================
FAILED main.py::test_e2e_update_pet_post_form - assert 400 == 200
FAILED main.py::test_delete_nonexistent_pet - assert 200 == 404
FAILED main.py::test_update_pet_form_nonexistent_id - assert 400 == 404
==================================================================== 3 failed, 13 passed in 18.65s ====================================================================
