============================= test session starts ==============================
collecting ... collected 13 items

main.py::test_post_pet_200 PASSED                                        [  7%]
main.py::test_post_pet_400_invalid_body PASSED                           [ 15%]
main.py::test_put_pet_200 PASSED                                         [ 23%]
main.py::test_put_pet_404_nonexistent FAILED                             [ 30%]
main.py:37 (test_put_pet_404_nonexistent)
def test_put_pet_404_nonexistent():
>       invalid_data = pet_data.copy()
E       AttributeError: 'function' object has no attribute 'copy'

main.py:39: AttributeError

main.py::test_get_pet_by_status_200 PASSED                               [ 38%]
main.py::test_get_pet_by_status_400_invalid PASSED                       [ 46%]
main.py::test_get_pet_by_tags_200 PASSED                                 [ 53%]
main.py::test_get_pet_by_id_200 PASSED                                   [ 61%]
main.py::test_get_pet_by_id_404 PASSED                                   [ 69%]
main.py::test_post_pet_id_400_invalid PASSED                             [ 76%]
main.py::test_delete_pet_200 PASSED                                      [ 84%]
main.py::test_upload_image_415 FAILED                                    [ 92%]
main.py:89 (test_upload_image_415)
500 != 415

Expected :415
Actual   :500
<Click to see difference>

pet_data = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 9999, 'name': 'TestPet', 'photoUrls': ['string'], ...}

    def test_upload_image_415(pet_data):
        # First create pet
        requests.post(f"{BASE_URL}/pet", json=pet_data)
        # Sending invalid content type
        response = requests.post(f"{BASE_URL}/pet/{pet_data['id']}/uploadImage", data="invalid")
        coverage.record_test_result("POST /pet/{petId}/uploadImage", response.status_code)
>       assert response.status_code == 415
E       assert 500 == 415
E        +  where 500 = <Response [500]>.status_code

main.py:96: AssertionError

main.py::test_end_to_end_crud FAILED                                     [100%]
main.py:97 (test_end_to_end_crud)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

def test_end_to_end_crud():
        # Create
        pet_data = {
            "id": 9998,
            "name": "CrudPet",
            "category": {"id": 1, "name": "Cats"},
            "photoUrls": ["string"],
            "tags": [{"id": 1, "name": "tag1"}],
            "status": "available"
        }
        create_response = requests.post(f"{BASE_URL}/pet", json=pet_data)
        coverage.record_test_result("POST /pet", create_response.status_code)
        assert create_response.status_code == 200
    
        # Read
        read_response = requests.get(f"{BASE_URL}/pet/{pet_data['id']}")
        coverage.record_test_result("GET /pet/{petId}", read_response.status_code)
>       assert read_response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:115: AssertionError

==================================================
               API COVERAGE REPORT                
==================================================

1. Среднее покрытие эндпоинтов раздела Pet: 39.0%
2. Покрытие статус-кодов раздела Pet: 37.9%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 17.2%

Детали по endpoint'ам:
PUT /pet: 1/5 (20.0%) ------> ['200'] / ['200', '400', '404', '422', 'default']
POST /pet: 2/4 (50.0%) ------> ['200', '400'] / ['200', '400', '422', 'default']
GET /pet/findByStatus: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', 'default']
GET /pet/findByTags: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
GET /pet/{petId}: 2/4 (50.0%) ------> ['200', '404'] / ['200', '400', '404', 'default']
POST /pet/{petId}: 1/3 (33.3%) ------> ['400'] / ['200', '400', 'default']
DELETE /pet/{petId}: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
POST /pet/{petId}/uploadImage: 1/4 (25.0%) ------> ['500'] / ['200', '400', '404', 'default']
GET /store/inventory: 0/2 (0.0%) ------> [] / ['200', 'default']
POST /store/order: 0/4 (0.0%) ------> [] / ['200', '400', '422', 'default']
GET /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
DELETE /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
POST /user: 0/2 (0.0%) ------> [] / ['200', 'default']
POST /user/createWithList: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /user/login: 0/3 (0.0%) ------> [] / ['200', '400', 'default']
GET /user/logout: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
PUT /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
DELETE /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']


======================== 3 failed, 10 passed in 19.68s =========================

Process finished with exit code 1
