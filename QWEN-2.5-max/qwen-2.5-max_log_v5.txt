============================= test session starts ==============================
collecting ... collected 10 items

main.py::test_create_pet PASSED                                          [ 10%]
main.py::test_update_pet PASSED                                          [ 20%]
main.py::test_find_pets_by_status PASSED                                 [ 30%]
main.py::test_get_pet_by_id PASSED                                       [ 40%]
main.py::test_delete_pet PASSED                                          [ 50%]
main.py::test_invalid_pet_creation PASSED                                [ 60%]
main.py::test_get_nonexistent_pet PASSED                                 [ 70%]
main.py::test_delete_nonexistent_pet PASSED                              [ 80%]
main.py::test_upload_pet_image FAILED                                    [ 90%]
main.py:188 (test_upload_pet_image)
415 != 200

Expected :200
Actual   :415
<Click to see difference>

@pytest.mark.positive
    def test_upload_pet_image():
        """Тест загрузки изображения для питомца."""
        # Создаем питомца
        pet_data = {
            "id": 999,
            "name": "TestPet",
            "category": {"id": 1, "name": "Dogs"},
            "photoUrls": ["http://example.com/photo"],
            "tags": [{"id": 1, "name": "tag1"}],
            "status": "available"
        }
        create_response = create_pet(pet_data)
        assert create_response.status_code == 200
    
        # Загружаем изображение
        pet_id = pet_data["id"]
        file_path = "test_image.jpg"
        with open(file_path, "wb") as f:
            f.write(b"fake image data")  # Создаем файл с фиктивными данными
        response = upload_pet_image(pet_id, file_path)
        os.remove(file_path)  # Удаляем временный файл после теста
>       assert response.status_code == 200
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:211: AssertionError

main.py::test_crud_operations FAILED                                     [100%]
main.py:214 (test_crud_operations)
404 != 200

Expected :200
Actual   :404
<Click to see difference>

@pytest.mark.e2e
    def test_crud_operations():
        """End-to-end тест CRUD операций."""
        # Создание питомца
        pet_data = {
            "id": 1000,
            "name": "E2EPet",
            "category": {"id": 1, "name": "Dogs"},
            "photoUrls": ["http://example.com/photo"],
            "tags": [{"id": 1, "name": "tag1"}],
            "status": "available"
        }
        create_response = create_pet(pet_data)
        assert create_response.status_code == 200
        coverage.record_test_result("POST /pet", create_response.status_code)
    
        # Получение питомца
        pet_id = pet_data["id"]
        get_response = get_pet_by_id(pet_id)
        assert get_response.status_code == 200
        coverage.record_test_result("GET /pet/{petId}", get_response.status_code)
    
        # Обновление питомца
        pet_data["name"] = "UpdatedE2EPet"
        update_response = update_pet(pet_data)
>       assert update_response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:240: AssertionError

==================================================
               API COVERAGE REPORT                
==================================================
1. Среднее покрытие эндпоинтов раздела Pet: 32.3%
2. Покрытие статус-кодов раздела Pet: 33.3%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 15.6%

Детали по endpoint'ам:
PUT /pet: 1/4 (25.0%) ------> ['200'] / ['200', '400', '404', '422']
POST /pet: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', '422']
GET /pet/findByStatus: 1/2 (50.0%) ------> ['200'] / ['200', '400']
GET /pet/findByTags: 0/2 (0.0%) ------> [] / ['200', '400']
GET /pet/{petId}: 2/3 (66.7%) ------> ['200', '404'] / ['200', '400', '404']
POST /pet/{petId}: 0/2 (0.0%) ------> [] / ['200', '400']
DELETE /pet/{petId}: 1/2 (50.0%) ------> ['200'] / ['200', '400']
POST /pet/{petId}/uploadImage: 0/3 (0.0%) ------> [] / ['200', '400', '404']
GET /store/inventory: 0/1 (0.0%) ------> [] / ['200']
POST /store/order: 0/3 (0.0%) ------> [] / ['200', '400', '422']
GET /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /store/order/{orderId}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
POST /user: 0/1 (0.0%) ------> [] / ['200']
POST /user/createWithList: 0/1 (0.0%) ------> [] / ['200']
GET /user/login: 0/2 (0.0%) ------> [] / ['200', '400']
GET /user/logout: 0/1 (0.0%) ------> [] / ['200']
GET /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
PUT /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']
DELETE /user/{username}: 0/3 (0.0%) ------> [] / ['200', '400', '404']


================== 2 failed, 8 passed, 10 warnings in 14.04s ===================

Process finished with exit code 1
