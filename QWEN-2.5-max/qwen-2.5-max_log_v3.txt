========================================================================= test session starts =========================================================================
platform darwin -- Python 3.12.3, pytest-8.3.5, pluggy-1.5.0
cachedir: .pytest_cache
plugins: Faker-37.1.0
collected 10 items                                                                                                                                                    

main.py::test_create_pet PASSED                                                                                                                                 [ 10%]
main.py::test_update_pet PASSED                                                                                                                                 [ 20%]
main.py::test_find_pets_by_status PASSED                                                                                                                        [ 30%]
main.py::test_get_pet_by_id PASSED                                                                                                                              [ 40%]
main.py::test_delete_pet PASSED                                                                                                                                 [ 50%]
main.py::test_invalid_pet_creation PASSED                                                                                                                       [ 60%]
main.py::test_get_nonexistent_pet PASSED                                                                                                                        [ 70%]
main.py::test_delete_nonexistent_pet PASSED                                                                                                                     [ 80%]
main.py::test_upload_pet_image FAILED                                                                                                                           [ 90%]
main.py::test_crud_operations FAILED                                                                                                                            [100%]

============================================================================== FAILURES ===============================================================================
________________________________________________________________________ test_upload_pet_image ________________________________________________________________________

    @pytest.mark.positive
    def test_upload_pet_image():
        """Тест загрузки изображения для питомца."""
        # Создаем питомца
        pet_data = {
            "id": 999,
            "name": "TestPet",
            "category": {"id": 1, "name": "Dogs"},
            "photoUrls": ["http://example.com/photo"],
            "tags": [{"id": 1, "name": "tag1"}],
            "status": "available"
        }
        create_response = create_pet(pet_data)
        assert create_response.status_code == 200
    
        # Загружаем изображение
        pet_id = pet_data["id"]
        file_path = "test_image.jpg"
        with open(file_path, "wb") as f:
            f.write(b"fake image data")  # Создаем файл с фиктивными данными
        response = upload_pet_image(pet_id, file_path)
        os.remove(file_path)  # Удаляем временный файл после теста
>       assert response.status_code == 200
E       assert 415 == 200
E        +  where 415 = <Response [415]>.status_code

main.py:183: AssertionError
________________________________________________________________________ test_crud_operations _________________________________________________________________________

    @pytest.mark.e2e
    def test_crud_operations():
        """End-to-end тест CRUD операций."""
        # Создание питомца
        pet_data = {
            "id": 1000,
            "name": "E2EPet",
            "category": {"id": 1, "name": "Dogs"},
            "photoUrls": ["http://example.com/photo"],
            "tags": [{"id": 1, "name": "tag1"}],
            "status": "available"
        }
        create_response = create_pet(pet_data)
        assert create_response.status_code == 200
        coverage.record_test_result("POST /pet", create_response.status_code)
    
        # Получение питомца
        pet_id = pet_data["id"]
        get_response = get_pet_by_id(pet_id)
>       assert get_response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:206: AssertionError
========================================================================== warnings summary ===========================================================================
main.py:45
  /Users/kir/PycharmProjects/pub/main.py:45: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:60
  /Users/kir/PycharmProjects/pub/main.py:60: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:81
  /Users/kir/PycharmProjects/pub/main.py:81: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:88
  /Users/kir/PycharmProjects/pub/main.py:88: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:109
  /Users/kir/PycharmProjects/pub/main.py:109: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:130
  /Users/kir/PycharmProjects/pub/main.py:130: PytestUnknownMarkWarning: Unknown pytest.mark.negative - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.negative

main.py:145
  /Users/kir/PycharmProjects/pub/main.py:145: PytestUnknownMarkWarning: Unknown pytest.mark.negative - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.negative

main.py:153
  /Users/kir/PycharmProjects/pub/main.py:153: PytestUnknownMarkWarning: Unknown pytest.mark.negative - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.negative

main.py:161
  /Users/kir/PycharmProjects/pub/main.py:161: PytestUnknownMarkWarning: Unknown pytest.mark.positive - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.positive

main.py:187
  /Users/kir/PycharmProjects/pub/main.py:187: PytestUnknownMarkWarning: Unknown pytest.mark.e2e - is this a typo?  You can register custom marks to avoid this warning - for details, see https://docs.pytest.org/en/stable/how-to/mark.html
    @pytest.mark.e2e

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
======================================================================= short test summary info =======================================================================
FAILED main.py::test_upload_pet_image - assert 415 == 200
FAILED main.py::test_crud_operations - assert 404 == 200
============================================================== 2 failed, 8 passed, 10 warnings in 13.40s ==============================================================
