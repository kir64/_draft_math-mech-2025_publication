========================================================================= test session starts =========================================================================
cachedir: .pytest_cache
plugins: Faker-37.1.0
collected 13 items                                                                                                                                                    

main.py::test_add_pet PASSED                                                                                                                                    [  7%]
main.py::test_add_pet_invalid_data PASSED                                                                                                                       [ 15%]
main.py::test_update_pet FAILED                                                                                                                                 [ 23%]
main.py::test_update_nonexistent_pet PASSED                                                                                                                     [ 30%]
main.py::test_find_pet_by_status PASSED                                                                                                                         [ 38%]
main.py::test_find_pet_by_status_invalid PASSED                                                                                                                 [ 46%]
main.py::test_find_pet_by_tags PASSED                                                                                                                           [ 53%]
main.py::test_get_pet_by_id FAILED                                                                                                                              [ 61%]
main.py::test_get_nonexistent_pet PASSED                                                                                                                        [ 69%]
main.py::test_update_pet_with_form_data FAILED                                                                                                                  [ 76%]
main.py::test_delete_pet PASSED                                                                                                                                 [ 84%]
main.py::test_upload_pet_image PASSED                                                                                                                           [ 92%]
main.py::test_pet_crud_workflow FAILED                                                                                                                          [100%]

============================================================================== FAILURES ===============================================================================
___________________________________________________________________________ test_update_pet ___________________________________________________________________________

setup_pet = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 1001, 'name': 'UpdatedDog', 'photoUrls': ['string'], ...}

    def test_update_pet(setup_pet):
        """Тест обновления питомца (PUT /pet)"""
        pet_data = setup_pet
        pet_data["name"] = "UpdatedDog"
        response = requests.put(f"{BASE_URL}/pet", json=pet_data)
        coverage.record_test_result("PUT /pet", response.status_code)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:60: AssertionError
_________________________________________________________________________ test_get_pet_by_id __________________________________________________________________________

setup_pet = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 1001, 'name': 'TestDog', 'photoUrls': ['string'], ...}

    def test_get_pet_by_id(setup_pet):
        """Тест получения питомца по ID (GET /pet/{petId})"""
        pet_data = setup_pet
        response = requests.get(f"{BASE_URL}/pet/{pet_data['id']}")
        coverage.record_test_result("GET /pet/{petId}", response.status_code)
>       assert response.status_code == 200
E       assert 404 == 200
E        +  where 404 = <Response [404]>.status_code

main.py:105: AssertionError
___________________________________________________________________ test_update_pet_with_form_data ____________________________________________________________________

setup_pet = {'category': {'id': 1, 'name': 'Dogs'}, 'id': 1001, 'name': 'TestDog', 'photoUrls': ['string'], ...}

    def test_update_pet_with_form_data(setup_pet):
        """Тест обновления питомца через форму (POST /pet/{petId})"""
        pet_data = setup_pet
        form_data = {
            "name": "FormUpdated",
            "status": "pending"
        }
        response = requests.post(
            f"{BASE_URL}/pet/{pet_data['id']}",
            data=form_data,
            headers={"Content-Type": "application/x-www-form-urlencoded"}
        )
        coverage.record_test_result("POST /pet/{petId}", response.status_code)
>       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = <Response [400]>.status_code

main.py:129: AssertionError
_______________________________________________________________________ test_pet_crud_workflow ________________________________________________________________________

    def test_pet_crud_workflow():
        """End-to-end тест CRUD операций для питомца"""
        # Create
        pet_data = {
            "id": 1002,
            "name": "CRUDDog",
            "category": {"id": 1, "name": "Dogs"},
            "photoUrls": ["string"],
            "tags": [{"id": 0, "name": "string"}],
            "status": "available"
        }
        create_response = requests.post(f"{BASE_URL}/pet", json=pet_data)
        coverage.record_test_result("POST /pet", create_response.status_code)
        assert create_response.status_code == 200
    
        # Read
        read_response = requests.get(f"{BASE_URL}/pet/{pet_data['id']}")
        coverage.record_test_result("GET /pet/{petId}", read_response.status_code)
        assert read_response.status_code == 200
        assert read_response.json()["name"] == "CRUDDog"
    
        # Update
        pet_data["name"] = "UpdatedCRUDDog"
        update_response = requests.put(f"{BASE_URL}/pet", json=pet_data)
        coverage.record_test_result("PUT /pet", update_response.status_code)
        assert update_response.status_code == 200
    
        # Verify Update
        verify_response = requests.get(f"{BASE_URL}/pet/{pet_data['id']}")
        coverage.record_test_result("GET /pet/{petId}", verify_response.status_code)
        assert verify_response.status_code == 200
>       assert verify_response.json()["name"] == "UpdatedCRUDDog"
E       AssertionError: assert 'CRUDDog' == 'UpdatedCRUDDog'
E         
E         - UpdatedCRUDDog
E         + CRUDDog

main.py:183: AssertionError
========================================================================= API COVERAGE REPORT =========================================================================
1. Среднее покрытие эндпоинтов раздела Pet: 41.5%
2. Покрытие статус-кодов раздела Pet: 41.4%
3. Полностью покрытые эндпоинты API: 0.0%
4. Общее покрытие статус-кодов API: 18.8%

Детали по endpoint'ам:
DELETE /pet/{petId}: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
DELETE /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
DELETE /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
GET /pet/findByStatus: 2/3 (66.7%) ------> ['200', '400'] / ['200', '400', 'default']
GET /pet/findByTags: 1/3 (33.3%) ------> ['200'] / ['200', '400', 'default']
GET /pet/{petId}: 2/4 (50.0%) ------> ['200', '404'] / ['200', '400', '404', 'default']
GET /store/inventory: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /store/order/{orderId}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
GET /user/login: 0/3 (0.0%) ------> [] / ['200', '400', 'default']
GET /user/logout: 0/2 (0.0%) ------> [] / ['200', 'default']
GET /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
POST /pet: 2/4 (50.0%) ------> ['200', '500'] / ['200', '400', '422', 'default']
POST /pet/{petId}: 1/3 (33.3%) ------> ['400'] / ['200', '400', 'default']
POST /pet/{petId}/uploadImage: 1/4 (25.0%) ------> ['415'] / ['200', '400', '404', 'default']
POST /store/order: 0/4 (0.0%) ------> [] / ['200', '400', '422', 'default']
POST /user: 0/2 (0.0%) ------> [] / ['200', 'default']
POST /user/createWithList: 0/2 (0.0%) ------> [] / ['200', 'default']
PUT /pet: 2/5 (40.0%) ------> ['200', '404'] / ['200', '400', '404', '422', 'default']
PUT /user/{username}: 0/4 (0.0%) ------> [] / ['200', '400', '404', 'default']
======================================================================= short test summary info =======================================================================
FAILED main.py::test_update_pet - assert 404 == 200
FAILED main.py::test_get_pet_by_id - assert 404 == 200
FAILED main.py::test_update_pet_with_form_data - assert 400 == 200
FAILED main.py::test_pet_crud_workflow - AssertionError: assert 'CRUDDog' == 'UpdatedCRUDDog'
